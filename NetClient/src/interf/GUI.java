package interf;

import utilz.Filez;
import java.util.ArrayList;
import javax.swing.text.DefaultCaret;
import net.Connection;
import utilz.Utils;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author fazo
 */
public class GUI extends javax.swing.JFrame {

    private String ip = "after-end.net";
    private int port = 7777;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setTitle("Client");
        System.out.println("GUI Avviata");
        textArea.setLineWrap(true);
        DefaultCaret caret = (DefaultCaret) textArea.getCaret();
        //textArea.setContentType("text/html");
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        gui = this;
        textField.requestFocusInWindow();
        start();
    }
    private static GUI gui;

    private void start() {
        getSettings();
        append("Provo a connettermi a " + ip + ":" + port + "\n");
        Connection.connect(ip, port);
    }

    public static GUI get() {
        return gui;
    }

    public void append(String text) {
        textArea.append(text);
        System.out.print(text);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        textField.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyPressed(evt);
            }
        });

        sendButton.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        if (Connection.isConnected() && textField.getText() != "") {
            Connection.send(textField.getText());
        } else {
            append("Nuovo tentativo di connessione:\n");
            Connection.connect(ip, port);
        }
        textField.setText("");
        System.out.println("[DEBUG] Send");
    }//GEN-LAST:event_sendButtonActionPerformed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
        //if(evt.getKeyCode()==evt.VK_ENTER)sendButtonActionPerformed(null);
    }//GEN-LAST:event_jPanel1KeyPressed

    private void textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            sendButtonActionPerformed(null);
        }
    }//GEN-LAST:event_textFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui = new GUI();
                gui.setVisible(true);
            }
        });
        //gui.start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

    private void getSettings() {
        ArrayList<String> cnt;
        cnt = Utils.toList(Filez.getFileContent("settings.txt")," ");
        if (cnt == null) {
            append("File impostazioni non trovato!\nCreazione automatica.\n");
            Filez.writeFile("settings.txt", ip+" "+port);
            return;
        }
        if (cnt.size() != 2) {
            append("Errore: file di configurazione con numero parametri errati (" + cnt.size() + ")\n"
                    + "Per crearlo tu, inserisci SOLO l'IP e la PORTA del server separati da uno spazio\n");
            return;
        }
        ip = cnt.get(0);
        port = Integer.parseInt(cnt.get(1));
        /*FileReader fr = null;
         try {
         fr = new FileReader("settings.txt");
         } catch (FileNotFoundException ex) {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         append("Settings file not found! Using default settings\nTo create a"
         + " settings file, place it next to this jar executable and "
         + "name it settings.txt\nInside there should be 2 lines, "
         + "the first with the ip and the second with the port\n");
         return;
         }
         BufferedReader br = new BufferedReader(fr);
         try {
         ip = br.readLine();
         } catch (IOException ex) {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         append("Could not read IP from settings file. Using localhost\n");
         ip = "localhost";
         }
         try {
         port = Integer.parseInt(br.readLine());
         } catch (IOException ex) {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         append("Could not read port from settings file. Using 7777\n");
         port = 7777;
         } catch (NumberFormatException ex) {
         append("Could not read port from settings file. Using 7777\n");
         port = 7777;
         }
         try {
         fr.close();
         } catch (IOException ex) {
         //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         }*/
    }
}
